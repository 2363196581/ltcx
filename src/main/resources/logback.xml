<?xml version="1.0" encoding="UTF-8"?>
<!--scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。-->
<configuration>
    <!--设置变量，可设置多个 -->
    <property name="logBase" value="D:/Logs/cxcard" />
    <!--设置上下文名称-->
    <contextName>${projectName}</contextName>
    <!--获取时间字符串-->
    <!--<timestamp key="bySecond" datePattern="yyyyMMdd'T'HHmmss" />-->

    <!--appender规定打印格式，过滤器，滚动
    ConsoleAppender：把日志添加到控制台
    FileAppender：把日志添加到文件
    RollingFileAppender：日志滚动-->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!--当name为FileAppender时，可添加file属性，写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值-->
        <!--<file>D://Logs/myLogFile.log</file>-->

        <!--&lt;!&ndash;append：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true&ndash;&gt;-->
        <!--<append>true</append>-->

        <!--&lt;!&ndash;filter级别过滤器  onMath：匹配，onMismatch：不匹配-->
        <!--过滤器的日志级别配置为INFO，所有INFO级别的日志交给appender处理，非INFO级别的日志，被过滤掉&ndash;&gt;-->
        <!--<filter class="ch.qos.logback.classic.filter.LevelFilter">-->
        <!--<level>INFO</level>-->
        <!--<onMatch>ACCEPT</onMatch>-->
        <!--<onMismatch>DENY</onMismatch>-->
        <!--</filter>-->

        <!--&lt;!&ndash;临界值过滤器： 过滤掉 TRACE 和 DEBUG 级别的日志&ndash;&gt;-->
        <!--<filter class="ch.qos.logback.classic.filter.ThresholdFilter">-->
        <!--<level>INFO</level>-->
        <!--</filter>-->

        <!--&lt;!&ndash;求值过滤器 过滤掉所有日志消息中不包含“billing”字符串的日志&ndash;&gt;-->
        <!--<filter class="ch.qos.logback.core.filter.EvaluatorFilter">-->
        <!--<evaluator> &lt;!&ndash; 默认为 ch.qos.logback.classic.boolex.JaninoEventEvaluator &ndash;&gt;-->
        <!--<expression>return message.contains("billing");</expression>-->
        <!--</evaluator>-->
        <!--<OnMatch>ACCEPT </OnMatch>-->
        <!--<OnMismatch>DENY</OnMismatch>-->
        <!--</filter>-->

        <!--当name为FileAppender时，可添加rollingPolicy或triggeringPolicy属性
        根据时间滚动，超过30日就覆盖最早的日志-->
        <!--<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
            <!--<fileNamePattern>D://Logs/myLogFile.%d{yyyy-MM-dd}.log</fileNamePattern>-->
            <!--<maxHistory>30</maxHistory>-->
        <!--</rollingPolicy>-->


        <!--&lt;!&ndash;当name为FileAppender时，可添加rollingPolicy或triggeringPolicy属性-->
        <!--根据窗口大小滚动，超过三个窗口就覆盖最早的日志&ndash;&gt;-->
        <!--<rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">-->
            <!--&lt;!&ndash;必要节点，包含文件名及“%d”转换符， “%d”可以包含一个java.text.SimpleDateFormat指定的时间格式，如：%d{yyyy-MM}&ndash;&gt;-->
            <!--<fileNamePattern>D://Logs/myLogFile.%i.log.zip</fileNamePattern>-->
            <!--<minIndex>1</minIndex>-->
            <!--<maxIndex>3</maxIndex>-->
        <!--</rollingPolicy>-->

        <!--根据日志文件大小滚动，超过5Mb就覆盖最早的日志-->
        <!--<triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">-->
        <!--<maxFileSize>5MB</maxFileSize>-->
        <!--</triggeringPolicy>-->

        <!-- encoder格式化日志， 默认配置为PatternLayoutEncoder -->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
            <charset class="java.nio.charset.Charset">GBK</charset>
        </encoder>
    </appender>

    <!-- 系统日志配置 -->
    <appender name="sysLogAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--<file>${logBase}/sys.log</file>-->
        <append>true</append>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>${logBase}/%d{yyyyMMdd}/sys-%d{yyyyMMdd}.log
            </FileNamePattern>
            <maxHistory>365</maxHistory>
        </rollingPolicy>
        <!-- <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
                <maxFileSize>1MB</maxFileSize>
            </triggeringPolicy> -->
        <encoder>
            <ImmediateFlush>true</ImmediateFlush>
            <charset>utf-8</charset>
            <Pattern>[%d{yyyyMMdd HH:mm:ss}] - %m%n</Pattern>
        </encoder>
    </appender>
    <!--dao日志-->
    <appender name="daoLogAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--<file>${logBase}/dao.log</file>-->
        <append>true</append>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>${logBase}/%d{yyyyMMdd}/dao-%d{yyyyMMdd}.log
            </FileNamePattern>
            <maxHistory>365</maxHistory>
        </rollingPolicy>
        <!-- <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
                <maxFileSize>1MB</maxFileSize>
            </triggeringPolicy> -->
        <encoder>
            <ImmediateFlush>true</ImmediateFlush>
            <charset>utf-8</charset>
            <Pattern>[%d{yyyyMMdd HH:mm:ss}] [%-5level] [%-30logger{0}][%-3L]
                [SeqId:%X{SeqId}] - %m%n</Pattern>
        </encoder>
    </appender>
    <!--service日志-->
    <appender name="serviceLogAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--<file>${logBase}/service.log</file>-->
        <append>true</append>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>${logBase}/%d{yyyyMMdd}/service-%d{yyyyMMdd}.log
            </FileNamePattern>
            <maxHistory>365</maxHistory>
        </rollingPolicy>
        <!-- <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
                <maxFileSize>1MB</maxFileSize>
            </triggeringPolicy> -->
        <encoder>
            <ImmediateFlush>true</ImmediateFlush>
            <charset>utf-8</charset>
            <Pattern>[%d{yyyyMMdd HH:mm:ss}] - %m%n</Pattern>
        </encoder>
    </appender>
    <!--controller日志-->
    <appender name="controllerLogAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--<file>${logBase}/controller.log</file>-->
        <append>true</append>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>${logBase}/%d{yyyyMMdd}/controller-%d{yyyyMMdd}.log
            </FileNamePattern>
            <maxHistory>365</maxHistory>
        </rollingPolicy>
        <!-- <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
                <maxFileSize>1MB</maxFileSize>
            </triggeringPolicy> -->
        <encoder>
            <ImmediateFlush>true</ImmediateFlush>
            <charset>utf-8</charset>
            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{40} - %msg%n</pattern>
            <!--<Pattern>[%d{yyyyMMdd HH:mm:ss}]- %m%n</Pattern>-->
        </encoder>
    </appender>

    <!--其他日志输出示例每天生成一个日志文件，保存30天的日志文件-->
    <appender name="otherLogAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
        <fileNamePattern>${CATALINA_BASE}/Controllerlog.%d{yyyy-MM-dd}.log</fileNamePattern>
        <maxHistory>3</maxHistory>
    </rollingPolicy>
        <encoder>
        <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{40} - %msg%n</pattern>
        </encoder>
    </appender>

    <!--将日志存入数据库-->
    <!--<appender name="DBLog" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
        <!--<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
        <!--<fileNamePattern>${CATALINA_BASE}/spring-druid-shiro-DBlog.%d{yyyy-MM-dd}.log</fileNamePattern>-->
        <!--<maxHistory>3</maxHistory>-->
        <!--</rollingPolicy>-->
        <!--<encoder>-->
        <!--<pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{40} - %msg%n</pattern>-->
        <!--</encoder>-->
    <!--</appender>-->

    <!-- logback为java中的包
    打印name指定包中的日志文件, level不设置则集成root，additivity为true表示打印信息向上传递-->
    <!--指定日志名打印-->
    <logger name="sysLog" additivity="true" level="DEBUG">
        <appender-ref ref="stdout" />
        <appender-ref ref="sysLogAppender" />
    </logger>
    <logger name="daoLog" additivity="false" level="ERROR">
        <appender-ref ref="daoLogAppender" />
    </logger>
    <logger name="serviceLog" additivity="false" level="ERROR">
        <appender-ref ref="serviceLogAppender" />
    </logger>
    <logger name="controllerLog" additivity="true" level="DEBUG">
        <appender-ref ref="stdout" />
        <appender-ref ref="controllerLogAppender" />
    </logger>

    <!--指定包名打印-->
    <logger name="com.connxun.common.controller.BaseController" level="info" additivity="false">
        <!-- ref引入appender的name为打印格式-->
        <appender-ref ref="ControllerLog"/>
    </logger>
    <!-- level: 设置打印级别
    trace debug info warn error 5种级别，打印level同级及以上的所有日志-->
    <root level="debug">
        <appender-ref ref="STDOUT" />
    </root>
    <logger name="org.springframework" level="INFO" />
</configuration>